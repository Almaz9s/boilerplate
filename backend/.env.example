# =============================================================================
# Backend Configuration
# =============================================================================
# Copy this file to .env and customize for your local environment
# Never commit .env to version control!

# -----------------------------------------------------------------------------
# Server Configuration
# -----------------------------------------------------------------------------
# HOST: Interface to bind the server to (0.0.0.0 = all interfaces)
HOST=0.0.0.0

# PORT: Port number for the server
PORT=8080

# ENVIRONMENT: Application environment (development, staging, production)
ENVIRONMENT=development

# REQUEST_TIMEOUT: Maximum request processing time in seconds
REQUEST_TIMEOUT=30

# -----------------------------------------------------------------------------
# Database Configuration
# -----------------------------------------------------------------------------
# DATABASE_URL: PostgreSQL connection string (REQUIRED)
# Format: postgres://username:password@host:port/database
DATABASE_URL=postgres://postgres:postgres@localhost:5432/backend_db

# DATABASE_POOL_SIZE: Maximum number of database connections in the pool
DATABASE_POOL_SIZE=10

# -----------------------------------------------------------------------------
# JWT Authentication
# -----------------------------------------------------------------------------
# JWT_SECRET: Secret key for signing JWT tokens (REQUIRED)
# ⚠️  MUST be changed in production! Use a long, random string.
# Generate with: openssl rand -base64 32
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# JWT_EXPIRATION_HOURS: How long JWT tokens are valid (in hours)
JWT_EXPIRATION_HOURS=24

# -----------------------------------------------------------------------------
# CORS (Cross-Origin Resource Sharing)
# -----------------------------------------------------------------------------
# CORS_ALLOWED_ORIGINS: Comma-separated list of allowed origins
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

# -----------------------------------------------------------------------------
# Logging & Observability
# -----------------------------------------------------------------------------
# OTEL: Enable full OpenTelemetry tracing in development (default: disabled)
# By default, development uses simple logging. Set OTEL=1 to enable full tracing.
# Production always uses OpenTelemetry regardless of this setting.
# OTEL=1

# LOG_TO_FILE: Enable file logging in development (writes to logs/dev.log)
# Useful for debugging - logs are written to both console and file
# LOG_TO_FILE=1

# QUERY_LOG: Log all SQL queries in development (debug builds only)
# Shows query execution time and warns on slow queries (>100ms)
# Use with: QUERY_LOG=1 RUST_LOG=debug cargo run
# QUERY_LOG=1

# RUST_LOG: Controls logging verbosity
# Format: <global_level>,<crate>=<level>
#
# Available levels (from least to most verbose):
#   error, warn, info, debug, trace
#
# Recommended configurations:

# Development (default) - shows app logic and HTTP requests
RUST_LOG=info,backend=debug,tower_http=debug

# Verbose development - includes database queries and detailed traces
# RUST_LOG=debug,backend=trace,tower_http=trace,sqlx=debug,diesel=debug

# Production - errors and warnings only
# RUST_LOG=warn,backend=info

# Debugging specific issues - trace everything
# RUST_LOG=trace

# Focus on specific modules - useful for targeted debugging
# RUST_LOG=info,backend::handlers=trace,backend::services::auth=debug

# HTTP request/response debugging
# RUST_LOG=info,tower_http=trace,axum::rejection=trace

# Database query debugging (Diesel async)
# RUST_LOG=info,backend::db=debug,diesel=debug

# RUST_BACKTRACE: Show backtraces on panics (set to 1 or full)
# RUST_BACKTRACE=1

# -----------------------------------------------------------------------------
# Optional: Secret Management
# -----------------------------------------------------------------------------
# SECRET_PROVIDER: Where to load secrets from (env, aws, vault)
# SECRET_PROVIDER=env

# AWS Secrets Manager (requires 'aws-secrets' feature)
# AWS_REGION=us-east-1
# AWS_SECRET_NAME=backend/secrets

# HashiCorp Vault (requires 'vault-secrets' feature)
# VAULT_ADDR=http://localhost:8200
# VAULT_TOKEN=your-vault-token
